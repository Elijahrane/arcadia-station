using Content.Client.UserInterface.Controls;
using Content.Shared.ReverseEngineering;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Nyanotrasen.ReverseEngineering;

[GenerateTypedNameReferences]
public sealed partial class ReverseEngineeringMachineMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _ent = default!;

    public event Action<BaseButton.ButtonEventArgs>? OnServerSelectionButtonPressed;
    public event Action<BaseButton.ButtonEventArgs>? OnScanButtonPressed;
    public event Action<BaseButton.ButtonEventArgs>? OnPrintButtonPressed;
    public ReverseEngineeringMachineMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        ServerSelectionButton.OnPressed += a => OnServerSelectionButtonPressed?.Invoke(a);
        ScanButton.OnPressed += a => OnScanButtonPressed?.Invoke(a);
        PrintButton.OnPressed += a => OnPrintButtonPressed?.Invoke(a);
    }


    public void SetButtonsDisabled(ReverseEngineeringMachineScanUpdateState state)
    {
        ScanButton.Disabled = !state.CanScan;
        PrintButton.Disabled = !state.CanPrint;

        var disabled = !state.ServerConnected || !state.CanScan;
    }

    private void UpdateArtifactIcon(EntityUid? uid)
    {
        if (uid == null)
        {
            ArtifactDisplay.Visible = false;
            return;
        }
        ArtifactDisplay.Visible = true;

        if (!_ent.TryGetComponent<SpriteComponent>(uid, out var sprite))
            return;

        ArtifactDisplay.Sprite = sprite;
    }

    public void UpdateInformationDisplay(ReverseEngineeringMachineScanUpdateState state)
    {
        var message = new FormattedMessage();

        if (state.Scanning)
        {
            message.AddMarkup(Loc.GetString("analysis-console-info-scanner"));
            Information.SetMessage(message);
            UpdateArtifactIcon(null); //set it to blank
            return;
        }

        UpdateArtifactIcon(state.Artifact);

        if (state.ScanReport == null)
        {
            if (!state.AnalyzerConnected) //no analyzer connected
                message.AddMarkup(Loc.GetString("analysis-console-info-no-scanner"));
            else if (!state.CanScan) //no artifact
                message.AddMarkup(Loc.GetString("analysis-console-info-no-artifact"));
            else if (state.Artifact == null) //ready to go
                message.AddMarkup(Loc.GetString("analysis-console-info-ready"));
        }
        else
        {
            message.AddMessage(state.ScanReport);
        }

        Information.SetMessage(message);
    }

    public void UpdateProgressBar(ReverseEngineeringMachineScanUpdateState state)
    {
        ProgressBar.Visible = state.Scanning;
        ProgressLabel.Visible = state.Scanning;

        if (!state.Scanning)
            return;

        ProgressLabel.Text = Loc.GetString("analysis-console-progress-text",
            ("seconds", (int) state.TotalTime.TotalSeconds - (int) state.TimeRemaining.TotalSeconds));
        ProgressBar.Value = (float) state.TimeRemaining.Divide(state.TotalTime);
    }

    public override void Close()
    {
        base.Close();
    }
}

