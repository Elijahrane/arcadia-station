using Content.Shared.Borgs;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Client.Graphics;
using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Borgs
{
    [GenerateTypedNameReferences]
    public sealed partial class LawsMenu : DefaultWindow
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;
        public LawsBoundUserInterface Owner { get; }

        public LawsMenu(LawsBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            Owner = owner;
            UpdateLaws();

            if (_entityManager.TryGetComponent<LawsComponent>(owner.Machine, out var laws))
                StateLawsButton.Visible = laws.CanState;

            StateLawsButton.OnPressed += _ =>
            {
                StateLaws();
            };
        }

        public void UpdateLaws()
        {
            if (!_entityManager.TryGetComponent<LawsComponent>(Owner.Machine, out var laws))
                return;

            Laws.DisposeAllChildren();

            foreach (var law in laws.Laws)
            {
                var lawLabel = new RichTextLabel(){
                StyleClasses = {StyleNano.StyleClassLabelKeyText}
                };
                lawLabel.SetMessage(law);
                Laws.AddChild(lawLabel);
            }
        }

        /// <summary>
        ///     Sends a message to create a vaccine of the selected disease.
        /// </summary>
        private void StateLaws()
        {
            Owner.StateLawsMessage();
        }

    }
}
